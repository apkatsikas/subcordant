// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/apkatsikas/subcordant/interfaces"
	"github.com/delucks/go-subsonic"
	mock "github.com/stretchr/testify/mock"
)

// NewICommandHandler creates a new instance of ICommandHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICommandHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICommandHandler {
	mock := &ICommandHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ICommandHandler is an autogenerated mock type for the ICommandHandler type
type ICommandHandler struct {
	mock.Mock
}

type ICommandHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *ICommandHandler) EXPECT() *ICommandHandler_Expecter {
	return &ICommandHandler_Expecter{mock: &_m.Mock}
}

// HandlePlay provides a mock function for the type ICommandHandler
func (_mock *ICommandHandler) HandlePlay(id string) {
	_mock.Called(id)
	return
}

// ICommandHandler_HandlePlay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandlePlay'
type ICommandHandler_HandlePlay_Call struct {
	*mock.Call
}

// HandlePlay is a helper method to define mock.On call
//   - id
func (_e *ICommandHandler_Expecter) HandlePlay(id interface{}) *ICommandHandler_HandlePlay_Call {
	return &ICommandHandler_HandlePlay_Call{Call: _e.mock.On("HandlePlay", id)}
}

func (_c *ICommandHandler_HandlePlay_Call) Run(run func(id string)) *ICommandHandler_HandlePlay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ICommandHandler_HandlePlay_Call) Return() *ICommandHandler_HandlePlay_Call {
	_c.Call.Return()
	return _c
}

func (_c *ICommandHandler_HandlePlay_Call) RunAndReturn(run func(id string)) *ICommandHandler_HandlePlay_Call {
	_c.Run(run)
	return _c
}

// NewIDiscordClient creates a new instance of IDiscordClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDiscordClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDiscordClient {
	mock := &IDiscordClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IDiscordClient is an autogenerated mock type for the IDiscordClient type
type IDiscordClient struct {
	mock.Mock
}

type IDiscordClient_Expecter struct {
	mock *mock.Mock
}

func (_m *IDiscordClient) EXPECT() *IDiscordClient_Expecter {
	return &IDiscordClient_Expecter{mock: &_m.Mock}
}

// Init provides a mock function for the type IDiscordClient
func (_mock *IDiscordClient) Init(commandHandler interfaces.ICommandHandler) error {
	ret := _mock.Called(commandHandler)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interfaces.ICommandHandler) error); ok {
		r0 = returnFunc(commandHandler)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IDiscordClient_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type IDiscordClient_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - commandHandler
func (_e *IDiscordClient_Expecter) Init(commandHandler interface{}) *IDiscordClient_Init_Call {
	return &IDiscordClient_Init_Call{Call: _e.mock.On("Init", commandHandler)}
}

func (_c *IDiscordClient_Init_Call) Run(run func(commandHandler interfaces.ICommandHandler)) *IDiscordClient_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.ICommandHandler))
	})
	return _c
}

func (_c *IDiscordClient_Init_Call) Return(err error) *IDiscordClient_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IDiscordClient_Init_Call) RunAndReturn(run func(commandHandler interfaces.ICommandHandler) error) *IDiscordClient_Init_Call {
	_c.Call.Return(run)
	return _c
}

// JoinVoiceChat provides a mock function for the type IDiscordClient
func (_mock *IDiscordClient) JoinVoiceChat() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for JoinVoiceChat")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IDiscordClient_JoinVoiceChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JoinVoiceChat'
type IDiscordClient_JoinVoiceChat_Call struct {
	*mock.Call
}

// JoinVoiceChat is a helper method to define mock.On call
func (_e *IDiscordClient_Expecter) JoinVoiceChat() *IDiscordClient_JoinVoiceChat_Call {
	return &IDiscordClient_JoinVoiceChat_Call{Call: _e.mock.On("JoinVoiceChat")}
}

func (_c *IDiscordClient_JoinVoiceChat_Call) Run(run func()) *IDiscordClient_JoinVoiceChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDiscordClient_JoinVoiceChat_Call) Return(err error) *IDiscordClient_JoinVoiceChat_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IDiscordClient_JoinVoiceChat_Call) RunAndReturn(run func() error) *IDiscordClient_JoinVoiceChat_Call {
	_c.Call.Return(run)
	return _c
}

// NewISubsonicClient creates a new instance of ISubsonicClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISubsonicClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISubsonicClient {
	mock := &ISubsonicClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ISubsonicClient is an autogenerated mock type for the ISubsonicClient type
type ISubsonicClient struct {
	mock.Mock
}

type ISubsonicClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ISubsonicClient) EXPECT() *ISubsonicClient_Expecter {
	return &ISubsonicClient_Expecter{mock: &_m.Mock}
}

// GetAlbum provides a mock function for the type ISubsonicClient
func (_mock *ISubsonicClient) GetAlbum(albumId string) (*subsonic.AlbumID3, error) {
	ret := _mock.Called(albumId)

	if len(ret) == 0 {
		panic("no return value specified for GetAlbum")
	}

	var r0 *subsonic.AlbumID3
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*subsonic.AlbumID3, error)); ok {
		return returnFunc(albumId)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *subsonic.AlbumID3); ok {
		r0 = returnFunc(albumId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subsonic.AlbumID3)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(albumId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ISubsonicClient_GetAlbum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlbum'
type ISubsonicClient_GetAlbum_Call struct {
	*mock.Call
}

// GetAlbum is a helper method to define mock.On call
//   - albumId
func (_e *ISubsonicClient_Expecter) GetAlbum(albumId interface{}) *ISubsonicClient_GetAlbum_Call {
	return &ISubsonicClient_GetAlbum_Call{Call: _e.mock.On("GetAlbum", albumId)}
}

func (_c *ISubsonicClient_GetAlbum_Call) Run(run func(albumId string)) *ISubsonicClient_GetAlbum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ISubsonicClient_GetAlbum_Call) Return(albumID3 *subsonic.AlbumID3, err error) *ISubsonicClient_GetAlbum_Call {
	_c.Call.Return(albumID3, err)
	return _c
}

func (_c *ISubsonicClient_GetAlbum_Call) RunAndReturn(run func(albumId string) (*subsonic.AlbumID3, error)) *ISubsonicClient_GetAlbum_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type ISubsonicClient
func (_mock *ISubsonicClient) Init() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ISubsonicClient_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type ISubsonicClient_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *ISubsonicClient_Expecter) Init() *ISubsonicClient_Init_Call {
	return &ISubsonicClient_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *ISubsonicClient_Init_Call) Run(run func()) *ISubsonicClient_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ISubsonicClient_Init_Call) Return(err error) *ISubsonicClient_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ISubsonicClient_Init_Call) RunAndReturn(run func() error) *ISubsonicClient_Init_Call {
	_c.Call.Return(run)
	return _c
}
