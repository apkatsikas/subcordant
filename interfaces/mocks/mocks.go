// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"io"
	"net/url"

	"github.com/apkatsikas/go-subsonic"
	"github.com/apkatsikas/subcordant/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// NewICommandHandler creates a new instance of ICommandHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICommandHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICommandHandler {
	mock := &ICommandHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ICommandHandler is an autogenerated mock type for the ICommandHandler type
type ICommandHandler struct {
	mock.Mock
}

type ICommandHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *ICommandHandler) EXPECT() *ICommandHandler_Expecter {
	return &ICommandHandler_Expecter{mock: &_m.Mock}
}

// IsPlaying provides a mock function for the type ICommandHandler
func (_mock *ICommandHandler) IsPlaying() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsPlaying")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// ICommandHandler_IsPlaying_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPlaying'
type ICommandHandler_IsPlaying_Call struct {
	*mock.Call
}

// IsPlaying is a helper method to define mock.On call
func (_e *ICommandHandler_Expecter) IsPlaying() *ICommandHandler_IsPlaying_Call {
	return &ICommandHandler_IsPlaying_Call{Call: _e.mock.On("IsPlaying")}
}

func (_c *ICommandHandler_IsPlaying_Call) Run(run func()) *ICommandHandler_IsPlaying_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ICommandHandler_IsPlaying_Call) Return(b bool) *ICommandHandler_IsPlaying_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *ICommandHandler_IsPlaying_Call) RunAndReturn(run func() bool) *ICommandHandler_IsPlaying_Call {
	_c.Call.Return(run)
	return _c
}

// Play provides a mock function for the type ICommandHandler
func (_mock *ICommandHandler) Play() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Play")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ICommandHandler_Play_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Play'
type ICommandHandler_Play_Call struct {
	*mock.Call
}

// Play is a helper method to define mock.On call
func (_e *ICommandHandler_Expecter) Play() *ICommandHandler_Play_Call {
	return &ICommandHandler_Play_Call{Call: _e.mock.On("Play")}
}

func (_c *ICommandHandler_Play_Call) Run(run func()) *ICommandHandler_Play_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ICommandHandler_Play_Call) Return(err error) *ICommandHandler_Play_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ICommandHandler_Play_Call) RunAndReturn(run func() error) *ICommandHandler_Play_Call {
	_c.Call.Return(run)
	return _c
}

// Queue provides a mock function for the type ICommandHandler
func (_mock *ICommandHandler) Queue(albumId string) error {
	ret := _mock.Called(albumId)

	if len(ret) == 0 {
		panic("no return value specified for Queue")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(albumId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ICommandHandler_Queue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Queue'
type ICommandHandler_Queue_Call struct {
	*mock.Call
}

// Queue is a helper method to define mock.On call
//   - albumId
func (_e *ICommandHandler_Expecter) Queue(albumId interface{}) *ICommandHandler_Queue_Call {
	return &ICommandHandler_Queue_Call{Call: _e.mock.On("Queue", albumId)}
}

func (_c *ICommandHandler_Queue_Call) Run(run func(albumId string)) *ICommandHandler_Queue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ICommandHandler_Queue_Call) Return(err error) *ICommandHandler_Queue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ICommandHandler_Queue_Call) RunAndReturn(run func(albumId string) error) *ICommandHandler_Queue_Call {
	_c.Call.Return(run)
	return _c
}

// NewIDiscordClient creates a new instance of IDiscordClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDiscordClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDiscordClient {
	mock := &IDiscordClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IDiscordClient is an autogenerated mock type for the IDiscordClient type
type IDiscordClient struct {
	mock.Mock
}

type IDiscordClient_Expecter struct {
	mock *mock.Mock
}

func (_m *IDiscordClient) EXPECT() *IDiscordClient_Expecter {
	return &IDiscordClient_Expecter{mock: &_m.Mock}
}

// Init provides a mock function for the type IDiscordClient
func (_mock *IDiscordClient) Init(commandHandler interfaces.ICommandHandler) error {
	ret := _mock.Called(commandHandler)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interfaces.ICommandHandler) error); ok {
		r0 = returnFunc(commandHandler)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IDiscordClient_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type IDiscordClient_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - commandHandler
func (_e *IDiscordClient_Expecter) Init(commandHandler interface{}) *IDiscordClient_Init_Call {
	return &IDiscordClient_Init_Call{Call: _e.mock.On("Init", commandHandler)}
}

func (_c *IDiscordClient_Init_Call) Run(run func(commandHandler interfaces.ICommandHandler)) *IDiscordClient_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.ICommandHandler))
	})
	return _c
}

func (_c *IDiscordClient_Init_Call) Return(err error) *IDiscordClient_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IDiscordClient_Init_Call) RunAndReturn(run func(commandHandler interfaces.ICommandHandler) error) *IDiscordClient_Init_Call {
	_c.Call.Return(run)
	return _c
}

// JoinVoiceChat provides a mock function for the type IDiscordClient
func (_mock *IDiscordClient) JoinVoiceChat(cancelFunc context.CancelFunc) (io.Writer, error) {
	ret := _mock.Called(cancelFunc)

	if len(ret) == 0 {
		panic("no return value specified for JoinVoiceChat")
	}

	var r0 io.Writer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.CancelFunc) (io.Writer, error)); ok {
		return returnFunc(cancelFunc)
	}
	if returnFunc, ok := ret.Get(0).(func(context.CancelFunc) io.Writer); ok {
		r0 = returnFunc(cancelFunc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Writer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.CancelFunc) error); ok {
		r1 = returnFunc(cancelFunc)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IDiscordClient_JoinVoiceChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JoinVoiceChat'
type IDiscordClient_JoinVoiceChat_Call struct {
	*mock.Call
}

// JoinVoiceChat is a helper method to define mock.On call
//   - cancelFunc
func (_e *IDiscordClient_Expecter) JoinVoiceChat(cancelFunc interface{}) *IDiscordClient_JoinVoiceChat_Call {
	return &IDiscordClient_JoinVoiceChat_Call{Call: _e.mock.On("JoinVoiceChat", cancelFunc)}
}

func (_c *IDiscordClient_JoinVoiceChat_Call) Run(run func(cancelFunc context.CancelFunc)) *IDiscordClient_JoinVoiceChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.CancelFunc))
	})
	return _c
}

func (_c *IDiscordClient_JoinVoiceChat_Call) Return(writer io.Writer, err error) *IDiscordClient_JoinVoiceChat_Call {
	_c.Call.Return(writer, err)
	return _c
}

func (_c *IDiscordClient_JoinVoiceChat_Call) RunAndReturn(run func(cancelFunc context.CancelFunc) (io.Writer, error)) *IDiscordClient_JoinVoiceChat_Call {
	_c.Call.Return(run)
	return _c
}

// NewIStreamer creates a new instance of IStreamer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIStreamer(t interface {
	mock.TestingT
	Cleanup(func())
}) *IStreamer {
	mock := &IStreamer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IStreamer is an autogenerated mock type for the IStreamer type
type IStreamer struct {
	mock.Mock
}

type IStreamer_Expecter struct {
	mock *mock.Mock
}

func (_m *IStreamer) EXPECT() *IStreamer_Expecter {
	return &IStreamer_Expecter{mock: &_m.Mock}
}

// PrepStream provides a mock function for the type IStreamer
func (_mock *IStreamer) PrepStream(ctx context.Context, inputUrl *url.URL, cancelFunc context.CancelFunc) error {
	ret := _mock.Called(ctx, inputUrl, cancelFunc)

	if len(ret) == 0 {
		panic("no return value specified for PrepStream")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *url.URL, context.CancelFunc) error); ok {
		r0 = returnFunc(ctx, inputUrl, cancelFunc)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IStreamer_PrepStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepStream'
type IStreamer_PrepStream_Call struct {
	*mock.Call
}

// PrepStream is a helper method to define mock.On call
//   - ctx
//   - inputUrl
//   - cancelFunc
func (_e *IStreamer_Expecter) PrepStream(ctx interface{}, inputUrl interface{}, cancelFunc interface{}) *IStreamer_PrepStream_Call {
	return &IStreamer_PrepStream_Call{Call: _e.mock.On("PrepStream", ctx, inputUrl, cancelFunc)}
}

func (_c *IStreamer_PrepStream_Call) Run(run func(ctx context.Context, inputUrl *url.URL, cancelFunc context.CancelFunc)) *IStreamer_PrepStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*url.URL), args[2].(context.CancelFunc))
	})
	return _c
}

func (_c *IStreamer_PrepStream_Call) Return(err error) *IStreamer_PrepStream_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IStreamer_PrepStream_Call) RunAndReturn(run func(ctx context.Context, inputUrl *url.URL, cancelFunc context.CancelFunc) error) *IStreamer_PrepStream_Call {
	_c.Call.Return(run)
	return _c
}

// Stream provides a mock function for the type IStreamer
func (_mock *IStreamer) Stream(voice io.Writer, cancelFunc context.CancelFunc) error {
	ret := _mock.Called(voice, cancelFunc)

	if len(ret) == 0 {
		panic("no return value specified for Stream")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(io.Writer, context.CancelFunc) error); ok {
		r0 = returnFunc(voice, cancelFunc)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IStreamer_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type IStreamer_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - voice
//   - cancelFunc
func (_e *IStreamer_Expecter) Stream(voice interface{}, cancelFunc interface{}) *IStreamer_Stream_Call {
	return &IStreamer_Stream_Call{Call: _e.mock.On("Stream", voice, cancelFunc)}
}

func (_c *IStreamer_Stream_Call) Run(run func(voice io.Writer, cancelFunc context.CancelFunc)) *IStreamer_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer), args[1].(context.CancelFunc))
	})
	return _c
}

func (_c *IStreamer_Stream_Call) Return(err error) *IStreamer_Stream_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IStreamer_Stream_Call) RunAndReturn(run func(voice io.Writer, cancelFunc context.CancelFunc) error) *IStreamer_Stream_Call {
	_c.Call.Return(run)
	return _c
}

// NewISubsonicClient creates a new instance of ISubsonicClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISubsonicClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISubsonicClient {
	mock := &ISubsonicClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ISubsonicClient is an autogenerated mock type for the ISubsonicClient type
type ISubsonicClient struct {
	mock.Mock
}

type ISubsonicClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ISubsonicClient) EXPECT() *ISubsonicClient_Expecter {
	return &ISubsonicClient_Expecter{mock: &_m.Mock}
}

// GetAlbum provides a mock function for the type ISubsonicClient
func (_mock *ISubsonicClient) GetAlbum(albumId string) (*subsonic.AlbumID3, error) {
	ret := _mock.Called(albumId)

	if len(ret) == 0 {
		panic("no return value specified for GetAlbum")
	}

	var r0 *subsonic.AlbumID3
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*subsonic.AlbumID3, error)); ok {
		return returnFunc(albumId)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *subsonic.AlbumID3); ok {
		r0 = returnFunc(albumId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subsonic.AlbumID3)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(albumId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ISubsonicClient_GetAlbum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlbum'
type ISubsonicClient_GetAlbum_Call struct {
	*mock.Call
}

// GetAlbum is a helper method to define mock.On call
//   - albumId
func (_e *ISubsonicClient_Expecter) GetAlbum(albumId interface{}) *ISubsonicClient_GetAlbum_Call {
	return &ISubsonicClient_GetAlbum_Call{Call: _e.mock.On("GetAlbum", albumId)}
}

func (_c *ISubsonicClient_GetAlbum_Call) Run(run func(albumId string)) *ISubsonicClient_GetAlbum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ISubsonicClient_GetAlbum_Call) Return(albumID3 *subsonic.AlbumID3, err error) *ISubsonicClient_GetAlbum_Call {
	_c.Call.Return(albumID3, err)
	return _c
}

func (_c *ISubsonicClient_GetAlbum_Call) RunAndReturn(run func(albumId string) (*subsonic.AlbumID3, error)) *ISubsonicClient_GetAlbum_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type ISubsonicClient
func (_mock *ISubsonicClient) Init() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ISubsonicClient_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type ISubsonicClient_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *ISubsonicClient_Expecter) Init() *ISubsonicClient_Init_Call {
	return &ISubsonicClient_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *ISubsonicClient_Init_Call) Run(run func()) *ISubsonicClient_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ISubsonicClient_Init_Call) Return(err error) *ISubsonicClient_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ISubsonicClient_Init_Call) RunAndReturn(run func() error) *ISubsonicClient_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Stream provides a mock function for the type ISubsonicClient
func (_mock *ISubsonicClient) Stream(trackId string) (*url.URL, error) {
	ret := _mock.Called(trackId)

	if len(ret) == 0 {
		panic("no return value specified for Stream")
	}

	var r0 *url.URL
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*url.URL, error)); ok {
		return returnFunc(trackId)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *url.URL); ok {
		r0 = returnFunc(trackId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(trackId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ISubsonicClient_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type ISubsonicClient_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - trackId
func (_e *ISubsonicClient_Expecter) Stream(trackId interface{}) *ISubsonicClient_Stream_Call {
	return &ISubsonicClient_Stream_Call{Call: _e.mock.On("Stream", trackId)}
}

func (_c *ISubsonicClient_Stream_Call) Run(run func(trackId string)) *ISubsonicClient_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ISubsonicClient_Stream_Call) Return(uRL *url.URL, err error) *ISubsonicClient_Stream_Call {
	_c.Call.Return(uRL, err)
	return _c
}

func (_c *ISubsonicClient_Stream_Call) RunAndReturn(run func(trackId string) (*url.URL, error)) *ISubsonicClient_Stream_Call {
	_c.Call.Return(run)
	return _c
}
